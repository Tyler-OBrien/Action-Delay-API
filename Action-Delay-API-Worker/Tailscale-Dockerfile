# See https://aka.ms/customizecontainer to learn how to customize your debug container and how Visual Studio uses this Dockerfile to build your images for faster debugging.

# This stage is used when running from VS in fast mode (Default for Debug configuration)
FROM mcr.microsoft.com/dotnet/aspnet:9.0-alpine AS base
USER $APP_UID
WORKDIR /app
EXPOSE 8080

# This stage is used to build the service project
FROM mcr.microsoft.com/dotnet/sdk:9.0-alpine AS build
ARG BUILD_CONFIGURATION=Release
WORKDIR /src
COPY ["Action-Delay-API-Worker/Action-Delay-API-Worker.csproj", "Action-Delay-API-Worker/"]
RUN dotnet restore "./Action-Delay-API-Worker/Action-Delay-API-Worker.csproj"
COPY . .
WORKDIR "/src/Action-Delay-API-Worker"
RUN dotnet build "./Action-Delay-API-Worker.csproj" -c $BUILD_CONFIGURATION -o /app/build

# This stage is used to publish the service project to be copied to the final stage
FROM build AS publish
ARG BUILD_CONFIGURATION=Release
RUN dotnet publish "./Action-Delay-API-Worker.csproj" -c $BUILD_CONFIGURATION -o /app/publish /p:UseAppHost=false

# This stage is used in production or when running from VS in regular mode (Default when not using the Debug configuration)
FROM base AS final
WORKDIR /app
COPY --from=publish /app/publish .


USER root
RUN apk update && apk add ca-certificates wireguard-tools iptables ip6tables jq && rm -rf /var/cache/apk/*




# Copy binary to production image.
COPY --from=build /src/Action-Delay-API-Worker/Tailscale-start.sh /app/start.sh

# Copy Tailscale binaries from the tailscale image on Docker Hub.
COPY --from=docker.io/tailscale/tailscale:stable /usr/local/bin/tailscaled /app/tailscaled
COPY --from=docker.io/tailscale/tailscale:stable /usr/local/bin/tailscale /app/tailscale
RUN mkdir -p /var/run/tailscale /var/cache/tailscale /var/lib/tailscale

USER root
ENTRYPOINT  ["/app/start.sh"]

