---
import type { Job } from '../../models/cloudflare/job';
import type { QuickStats } from '../../models/cloudflare/quickstat';

interface Props {
	job: Job;
	stats: QuickStats[];
	type: string;
}

let lastUpdatedTxt = "";
let delayTxt = "";
let delayTxtUnit = "";
let pending = { className: "", textContent: ""}

const job = Astro.props.job;

const type = Astro.props.type;


function formatTime(ms: number | undefined): string {

	if (ms == undefined) return "";

let seconds = ms / 1000;
if (seconds < 60) {
return seconds.toFixed(2) + ' second(s)';
}

let minutes = seconds / 60;
if (minutes < 60) {
return minutes.toFixed(2) + ' minute(s)';
}

let hours = minutes / 60;
return hours.toFixed(2) + ' hour(s)';
}
function formatTimeReturnUnit(ms: number | undefined): string[] {

if (ms == undefined) return ['', ''];

let seconds = ms / 1000;
if (seconds < 60) {
return [seconds.toFixed(2), `second(s)`];
}

let minutes = seconds / 60;
if (minutes < 60) {
	return [minutes.toFixed(2), `minute(s)`];
}

let hours = minutes / 60;

return [hours.toFixed(2), `hour(s)`];
}

let quickAnalyticsData = Astro.props.stats;
// Parsing quickanalytics and updating the HTML
let peakPeriod, dailyMedian, getJobMedian, monthlyMedian, peakPeriodTxt, quarterlyMedian;


quickAnalyticsData?.forEach((item) => {
switch (item.period) {
case "Last 1 Day":
    dailyMedian = formatTime(parseInt(item.median_run_length));
    if (item.median_run_length && (parseInt(item.median_run_length)) > 0)
			getJobMedian = parseInt(item.median_run_length);
    break;
case "Last 30 Days":
    monthlyMedian = formatTime(parseInt(item.median_run_length));
    break;
case "Last 90 Days":
    quarterlyMedian = formatTime(parseInt(item.median_run_length));
    break;
default:
    peakPeriod = formatTime(parseInt(item.median_run_length));
	peakPeriodTxt  = `From ${new Date(item.period + "Z").toLocaleTimeString()} - ${new Date(new Date(item.period + "Z").getTime() + parseInt(item.median_run_length)).toLocaleTimeString()}`
}
})

var runTimeToUse = job.currentRunTime;
var runLengthToUse = job.currentRunLengthMs;
if (job.currentRunStatus === "Deployed") {
    if (job.internalJobName === "cron") {
        delayTxtUnit = "Last Event: " + formatTime(new Date() - new Date(job.currentRunTime)) + " ago"
		/*
        if (job.currentRunLengthMs < 120000) {
            cronId.textContent = "Healthy";
            cronId.className =  cronId.className.replaceAll("highlightYellow", "") + 'highlightGreen';
        }
        else {
            cronId.textContent = "Delayed";
            pending.className =  cronId.className.replaceAll("highlightGreen", "") + 'sub-header highlightYellow';
        }
		*/
    }
    else {
		[delayTxt, delayTxtUnit] = formatTimeReturnUnit(job.currentRunLengthMs);
    }
    pending.className = '';
    pending.textContent = '';
} else if (job.currentRunStatus === "Undeployed" && ((!getJobMedian || job.currentRunLengthMs  > getJobMedian * 1.2) && job.currentRunLengthMs > 5000)) {
	[delayTxt, delayTxtUnit] = formatTimeReturnUnit(job.currentRunLengthMs);
    if ((!getJobMedian || (job.currentRunLengthMs * 3) > getJobMedian) && job.currentRunLengthMs > 30000)
    {
        pending.textContent = 'IN PROGRESS';
        pending.className = 'highlightRed';
    }
    else {
    pending.textContent = 'IN PROGRESS';
    pending.className = 'highlightYellow';
    }
}
else if (job.currentRunStatus == "API_Error" && job.lastRunStatus == "API_Error") {
    delayTxt = 'CF API Error';
	delayTxtUnit = "";
    pending.textContent = 'CF API Error';
    pending.className = 'highlightRed';
}
else
{
	[delayTxt, delayTxtUnit] = formatTimeReturnUnit(job.lastRunLengthMs);
    pending.className = '';
    pending.textContent = '';
    runTimeToUse = job.lastRunTime;
	runLengthToUse = job.lastRunLengthMs;
}

let noLastUpdate = false;

lastUpdatedTxt = formatTime(new Date() - new Date(new Date(runTimeToUse).getTime())) + " ago";
if (job.internalJobName === "cron") {
	noLastUpdate = true;
}
---

<div class="w-full min-w-[22rem] min-h-80 dark:bg-[#222122c9] bg-white rounded-lg shadow-lg p-8" id=`${job.internalJobName}grid`> 
    <div class="text-2xl font-semibold text-center mb-4"> 
        <a href=`/${type}/${job.internalJobName}` class="text-blue-600 hover:underline">{job.jobName.replaceAll("Job", "").trimEnd()}</a> 
    </div>
    <div class="text-5xl font-bold text-center mb-2" id=`delayNumberOuter${job.internalJobName}`><span class="text-5xl font-bold text-center mb-2" id=`delayNumber${job.internalJobName}`>{delayTxt}</span> <span class="text-lg" id=`delayUnit${job.internalJobName}`>{delayTxtUnit}</span></div> 
	<div class=`${pending.className} text-center mb-2 h-4` id=`pending${job.internalJobName}`>{pending.textContent}</div>
	{noLastUpdate ? null : (<div class="text-gray text-sm text-center mb-4" id=`lastUpdate${job.internalJobName}`>Last Update: {lastUpdatedTxt}</div>)}
    
	{!peakPeriod ? null : ( 
    <div class="border-t border-gray-200 pt-2 mb-2">
        <div class="text-gray text-sm text-center">Last 24H Peak:</div> 
        <div class="font-semibold text-center" id=`peak${job.internalJobName}`>{peakPeriod}</div> 
        <div class="text-gray text-xs text-center" id=`peak-period${job.internalJobName}`>{peakPeriodTxt}</div> 
    </div>
	)}

    <div class="flex flex-col space-y-3 border-t">
        <div class="text-gray text-sm text-center mt-2" id=`median${job.internalJobName}`>90 Days Median: {quarterlyMedian}</div> 
    </div>
</div>


<style>
	.card {
		display: grid;
		grid-template: auto 1fr / auto 1fr;
		height: 11rem;
		background: var(--gradient-subtle);
		border: 1px solid var(--gray-800);
		border-radius: 0.75rem;
		overflow: hidden;
		box-shadow: var(--shadow-sm);
		text-decoration: none;
		font-family: var(--font-brand);
		font-size: var(--text-lg);
		font-weight: 500;
		transition: box-shadow var(--theme-transition);
	}

	.card:hover {
		box-shadow: var(--shadow-md);
	}

	.title {
		grid-area: 1 / 1 / 2 / 2;
		z-index: 1;
		margin: 0.5rem;
		padding: 0.5rem 1rem;
		background: var(--gray-999);
		color: var(--gray-200);
		border-radius: 0.375rem;
	}

	img {
		grid-area: 1 / 1 / 3 / 3;
		width: 100%;
		height: 100%;
		object-fit: cover;
	}

	@media (min-width: 50em) {
		.card {
			height: 22rem;
			border-radius: 1.5rem;
		}

		.title {
			border-radius: 0.9375rem;
		}
	}
</style>
