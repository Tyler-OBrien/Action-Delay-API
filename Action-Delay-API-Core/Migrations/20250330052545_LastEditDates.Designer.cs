// <auto-generated />
using System;
using Action_Delay_API_Core.Models.Database.Postgres;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Action_Delay_API_Core.Migrations
{
    [DbContext(typeof(ActionDelayDatabaseContext))]
    [Migration("20250330052545_LastEditDates")]
    partial class LastEditDates
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Action_Delay_API_Core.Models.Database.Postgres.ColoData", b =>
                {
                    b.Property<int>("ColoId")
                        .HasColumnType("integer");

                    b.Property<string>("CfRegionDo")
                        .HasColumnType("text");

                    b.Property<string>("CfRegionLb")
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FriendlyName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IATA")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("LastEditDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision");

                    b.HasKey("ColoId");

                    b.ToTable("ColoData", (string)null);
                });

            modelBuilder.Entity("Action_Delay_API_Core.Models.Database.Postgres.GenericJobData", b =>
                {
                    b.Property<string>("JobName")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastEditDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Metadata")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("JobName");

                    b.ToTable("JobData", (string)null);
                });

            modelBuilder.Entity("Action_Delay_API_Core.Models.Database.Postgres.JobData", b =>
                {
                    b.Property<string>("InternalJobName")
                        .HasColumnType("text");

                    b.Property<decimal?>("CurrentRunLengthMs")
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("CurrentRunStatus")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CurrentRunTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("JobDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("JobName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("JobType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("LastEditDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<decimal?>("LastRunLengthMs")
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("LastRunStatus")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastRunTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Locations")
                        .HasColumnType("text");

                    b.HasKey("InternalJobName");

                    b.HasIndex("InternalJobName");

                    b.ToTable("Jobs", (string)null);
                });

            modelBuilder.Entity("Action_Delay_API_Core.Models.Database.Postgres.JobDataLocation", b =>
                {
                    b.Property<string>("InternalJobName")
                        .HasColumnType("text");

                    b.Property<string>("LocationName")
                        .HasColumnType("text");

                    b.Property<decimal?>("CurrentRunLengthMs")
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("CurrentRunStatus")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CurrentRunTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("JobName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("LastEditDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<decimal?>("LastRunLengthMs")
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("LastRunStatus")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastRunTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("InternalJobName", "LocationName");

                    b.HasIndex("InternalJobName");

                    b.ToTable("JobLocations", (string)null);
                });

            modelBuilder.Entity("Action_Delay_API_Core.Models.Database.Postgres.JobError", b =>
                {
                    b.Property<string>("ErrorHash")
                        .HasColumnType("text");

                    b.Property<string>("ErrorDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ErrorType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("FirstSeen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FirstService")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("LastEditDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.HasKey("ErrorHash");

                    b.ToTable("JobErrors", (string)null);
                });

            modelBuilder.Entity("Action_Delay_API_Core.Models.Database.Postgres.LocationData", b =>
                {
                    b.Property<string>("LocationName")
                        .HasColumnType("text");

                    b.Property<int>("ASN")
                        .HasColumnType("integer");

                    b.Property<double>("CfLatency")
                        .HasColumnType("double precision");

                    b.Property<string>("ColoFriendlyLocationName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ColoId")
                        .HasColumnType("integer");

                    b.Property<double>("ColoLatitude")
                        .HasColumnType("double precision");

                    b.Property<double>("ColoLongitude")
                        .HasColumnType("double precision");

                    b.Property<bool>("Enabled")
                        .HasColumnType("boolean");

                    b.Property<string>("FriendlyLocationName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IATA")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("LastChange")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("LastEditDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("LocationLatitude")
                        .HasColumnType("double precision");

                    b.Property<double>("LocationLongitude")
                        .HasColumnType("double precision");

                    b.Property<string>("PathToCF")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Provider")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LocationName");

                    b.ToTable("LocationData", (string)null);
                });

            modelBuilder.Entity("Action_Delay_API_Core.Models.Database.Postgres.MetalData", b =>
                {
                    b.Property<int>("ColoId")
                        .HasColumnType("integer");

                    b.Property<int>("MachineID")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateFound")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("LastEditDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("ColoId", "MachineID");

                    b.ToTable("MetalData", (string)null);
                });

            modelBuilder.Entity("Action_Delay_API_Core.Models.Database.Postgres.JobDataLocation", b =>
                {
                    b.HasOne("Action_Delay_API_Core.Models.Database.Postgres.JobData", null)
                        .WithMany()
                        .HasForeignKey("InternalJobName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
